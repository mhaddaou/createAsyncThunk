{"ast":null,"code":"var _s = $RefreshSig$();\n// store.ts\nimport { configureStore, createSlice } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport { RootState } from './reducers';\nconst store = configureStore({\n  reducer: rootReducer\n});\nexport const useAppDispatch = () => {\n  _s();\n  return useDispatch();\n};\n\n// Define the async thunk type\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\n// Add the fetchData async thunk\nexport const fetchData = () => async dispatch => {\n  try {\n    // Your API call here (e.g., using axios)\n    const response = await axios.get('https://api.example.com/data');\n    dispatch(fetchDataSuccess(response.data));\n  } catch (error) {\n    var _error$message;\n    dispatch(fetchDataFailure((_error$message = error.message) !== null && _error$message !== void 0 ? _error$message : 'An error occurred.'));\n  }\n};\n\n// Define the initial state for the data\n\nconst initialState = {\n  data: '',\n  loading: false,\n  error: null\n};\n\n// Create a slice to handle the data state\nconst dataSlice = createSlice({\n  name: 'data',\n  initialState,\n  reducers: {\n    fetchDataSuccess: (state, action) => {\n      state.loading = false;\n      state.data = action.payload;\n      state.error = null;\n    },\n    fetchDataFailure: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }\n  }\n});\n\n// Export the action creators\nexport const {\n  fetchDataSuccess,\n  fetchDataFailure\n} = dataSlice.actions;\n\n// Combine the reducers\nconst rootReducer = combineReducers({\n  data: dataSlice.reducer\n});\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","useDispatch","axios","RootState","store","reducer","rootReducer","useAppDispatch","_s","fetchData","dispatch","response","get","fetchDataSuccess","data","error","_error$message","fetchDataFailure","message","initialState","loading","dataSlice","name","reducers","state","action","payload","actions","combineReducers"],"sources":["/goinfre/mhaddaou/app/src/Store.ts"],"sourcesContent":["// store.ts\nimport { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { useDispatch } from 'react-redux';\nimport { ThunkAction } from 'redux-thunk';\nimport axios from 'axios';\nimport { RootState } from './reducers';\n\nconst store = configureStore({\n  reducer: rootReducer,\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\n// Define the async thunk type\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, any>;\n\n// Add the fetchData async thunk\nexport const fetchData = (): AppThunk => async (dispatch) => {\n  try {\n    // Your API call here (e.g., using axios)\n    const response = await axios.get('https://api.example.com/data');\n    dispatch(fetchDataSuccess(response.data));\n  } catch (error) {\n    dispatch(fetchDataFailure(error.message ?? 'An error occurred.'));\n  }\n};\n\n// Define the initial state for the data\ninterface DataState {\n  data: string;\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: DataState = {\n  data: '',\n  loading: false,\n  error: null,\n};\n\n// Create a slice to handle the data state\nconst dataSlice = createSlice({\n  name: 'data',\n  initialState,\n  reducers: {\n    fetchDataSuccess: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.data = action.payload;\n      state.error = null;\n    },\n    fetchDataFailure: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n  },\n});\n\n// Export the action creators\nexport const { fetchDataSuccess, fetchDataFailure } = dataSlice.actions;\n\n// Combine the reducers\nconst rootReducer = combineReducers({\n  data: dataSlice.reducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default store;\n"],"mappings":";AAAA;AACA,SAASA,cAAc,EAAEC,WAAW,QAAuB,kBAAkB;AAC7E,SAASC,WAAW,QAAQ,aAAa;AAEzC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,YAAY;AAEtC,MAAMC,KAAK,GAAGL,cAAc,CAAC;EAC3BM,OAAO,EAAEC;AACX,CAAC,CAAC;AAGF,OAAO,MAAMC,cAAc,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,WAAW,CAAc,CAAC;AAAA;;AAE9D;AAAAO,EAAA,CAFaD,cAAc;EAAA,QAASN,WAAW;AAAA;AAK/C;AACA,OAAO,MAAMQ,SAAS,GAAGA,CAAA,KAAgB,MAAOC,QAAQ,IAAK;EAC3D,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,8BAA8B,CAAC;IAChEF,QAAQ,CAACG,gBAAgB,CAACF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAC3C,CAAC,CAAC,OAAOC,KAAK,EAAE;IAAA,IAAAC,cAAA;IACdN,QAAQ,CAACO,gBAAgB,EAAAD,cAAA,GAACD,KAAK,CAACG,OAAO,cAAAF,cAAA,cAAAA,cAAA,GAAI,oBAAoB,CAAC,CAAC;EACnE;AACF,CAAC;;AAED;;AAOA,MAAMG,YAAuB,GAAG;EAC9BL,IAAI,EAAE,EAAE;EACRM,OAAO,EAAE,KAAK;EACdL,KAAK,EAAE;AACT,CAAC;;AAED;AACA,MAAMM,SAAS,GAAGrB,WAAW,CAAC;EAC5BsB,IAAI,EAAE,MAAM;EACZH,YAAY;EACZI,QAAQ,EAAE;IACRV,gBAAgB,EAAEA,CAACW,KAAK,EAAEC,MAA6B,KAAK;MAC1DD,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACV,IAAI,GAAGW,MAAM,CAACC,OAAO;MAC3BF,KAAK,CAACT,KAAK,GAAG,IAAI;IACpB,CAAC;IACDE,gBAAgB,EAAEA,CAACO,KAAK,EAAEC,MAA6B,KAAK;MAC1DD,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACT,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEb,gBAAgB;EAAEI;AAAiB,CAAC,GAAGI,SAAS,CAACM,OAAO;;AAEvE;AACA,MAAMrB,WAAW,GAAGsB,eAAe,CAAC;EAClCd,IAAI,EAAEO,SAAS,CAAChB;AAClB,CAAC,CAAC;AAIF,eAAeD,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}